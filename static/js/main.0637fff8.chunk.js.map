{"version":3,"sources":["movie.js","App.js","reportWebVitals.js","index.js"],"names":["Movieposter","poster","alt","src","title","className","Moviegnere","genre","Movie","genres","synopsis","map","index","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovie","movies","movie","console","log","title_long","medium_cover_image","id","_getMovies","a","_callApi","setState","fetch","then","potato","json","data","catch","err","this","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8SAkCA,SAASA,EAAT,GAAoC,IAAdC,EAAa,EAAbA,OAAQC,EAAK,EAALA,IAC1B,OACI,qBAAKC,IAAKF,EAAQC,IAAKA,EAAKE,MAAOF,EAAKG,UAAU,kBAI1D,SAASC,EAAT,GAA6B,IAARC,EAAO,EAAPA,MACjB,OACI,sBAAMF,UAAU,eAAhB,SAAgCE,IASzBC,MA9Cf,YAAkD,IAAlCJ,EAAiC,EAAjCA,MAAOH,EAA0B,EAA1BA,OAAQQ,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,SACnC,OACQ,sBAAKL,UAAU,QAAf,UACI,qBAAKA,UAAU,gBAAf,SACI,cAACL,EAAD,CAAaC,OAAQA,MAEzB,sBAAKI,UAAU,gBAAf,UACI,6BAAKD,IACL,qBAAKC,UAAU,gBAAf,SACKI,EAAOE,KAAI,SAACJ,EAAOK,GAAR,OAAkB,cAACN,EAAD,CAAYC,MAAOA,GAAYK,QAEjE,mBAAGP,UAAU,kBAAb,SACA,cAAC,IAAD,CACAQ,KAAMH,EACNI,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,qBC6BbC,E,4MA5CbC,MAAQ,G,EAMRC,aAAe,WAWb,OAVe,EAAKD,MAAME,OAAOV,KAAI,SAACW,GAEpC,OADAC,QAAQC,IAAIF,GACL,cAAC,EAAD,CACPlB,MAAOkB,EAAMG,WACbxB,OAAQqB,EAAMI,mBAEdjB,OAAUa,EAAMb,OAChBC,SAAYY,EAAMZ,UAFbY,EAAMK,Q,EAQfC,W,sBAAa,4BAAAC,EAAA,sEACU,EAAKC,WADf,OACLT,EADK,OAEX,EAAKU,SAAS,CACZV,WAHS,2C,EAObS,SAAW,WACT,OAAOE,MAAM,iEACZC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKf,UACvBgB,OAAM,SAAAC,GAAG,OAAIf,QAAQC,IAAIc,O,kEA5B1BC,KAAKX,e,+BAiCL,OACE,qBAAKvB,UAAWkC,KAAKpB,MAAME,OAAS,MAAQ,eAA5C,SACGkB,KAAKpB,MAAME,OAASkB,KAAKnB,eAAiB,gB,GAvCjCoB,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0637fff8.chunk.js","sourcesContent":["import React  from 'react';\r\nimport './movie.css';\r\nimport LinesEllipsis from 'react-lines-ellipsis';\r\n\r\n\r\nfunction Movie({title, poster, genres, synopsis}){\r\n    return(\r\n            <div className=\"Movie\">\r\n                <div className=\"Movie__column\">\r\n                    <Movieposter poster={poster}/>\r\n                </div>\r\n                <div className=\"Movie__column\">\r\n                    <h1>{title}</h1>\r\n                    <div className=\"Movie__genres\">\r\n                        {genres.map((genre, index) => <Moviegnere genre={genre} key={index} />)}\r\n                    </div>\r\n                    <p className=\"Movie__synopsis\">\r\n                    <LinesEllipsis\r\n                    text={synopsis}\r\n                    maxLine='3'\r\n                    ellipsis='...'\r\n                    trimRight\r\n                    basedOn='letters'\r\n                    />\r\n                    </p>\r\n                </div>\r\n               \r\n\r\n               \r\n           </div>\r\n    )\r\n}\r\n\r\n\r\nfunction Movieposter({poster, alt}){\r\n    return(\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie__poster\"/>\r\n    )\r\n}\r\n\r\nfunction Moviegnere({genre}){\r\n    return(\r\n        <span className=\"Movie__genre\">{genre}</span>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default Movie;","import './App.css';\nimport { Component } from 'react';\nimport Movie from './movie';\n\n\n\nclass App extends Component{\n  state = {}\n  \n  componentDidMount(){\n    this._getMovies();\n  }\n\n  _renderMovie = () =>{\n    const movies = this.state.movies.map((movie) =>{\n      console.log(movie)\n      return <Movie \n      title={movie.title_long} \n      poster={movie.medium_cover_image} \n      key={movie.id} \n      genres = {movie.genres}\n      synopsis = {movie.synopsis}\n      />\n    })\n    return movies\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi()\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.mx/api/v2/list_movies.json?sort_by=download_count')\n    .then(potato => potato.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n  }\n\n  render(){\n\n    return (\n      <div className={this.state.movies ? \"App\" : \"App--loading\"}>\n        {this.state.movies ? this._renderMovie() : \"loading\"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}